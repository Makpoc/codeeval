#!/usr/bin/env python2.7
# encoding=utf-8
import math
import sys


def load_file(f):
    return open(f, 'r')


def check_sudoku_sequence(dimension, sequence):
    unique_sequence = set(sequence)
    print 'checking %s' % sequence
    if len(unique_sequence) != len(sequence):
        raise AssertionError

    for n in sequence:
        if not (0 < n <= dimension):
            raise AssertionError


def extract_subgrid(subgrid_index, matrix):
    matrix_dimension = len(matrix[0])
    subgrid_dimension = int(math.sqrt(matrix_dimension))
    row_start = int(subgrid_index / subgrid_dimension) * subgrid_dimension
    column_start = int((subgrid_index * subgrid_dimension) % matrix_dimension)
    subgrid = []
    for row_index in range(row_start, row_start + subgrid_dimension):
        for column_index in range(column_start, column_start + subgrid_dimension):
            subgrid.append(matrix[row_index][column_index])

    return subgrid


def main(argv):
    f = load_file(argv[0])

    for row in f:
        result = True
        row = row.strip('\n')
        dimension = int(row.split(";")[0])
        values = row.split(";")[1]
        values = [int(n) for n in values.split(",")]  # split and convert to int



        # 1,4,2,3,2,3,1,4,4,2,3,1,3,1,4,2
        # ->
        # [
        # [1,4,2,3]
        # [2,3,1,4]
        # [4,2,3,1]
        # [3,1,4,2]
        # ]


        # 4 1 2 3
        # 1 4 3 2
        # 2 3 1 4
        # 3 2 4 1
        matrix = []

        for table_row in range(0, len(values), dimension):
            matrix.append(values[table_row:table_row + dimension])

        try:
            for n in range(0, dimension):

                # check row:
                check_sudoku_sequence(dimension, matrix[n])

                # check column:
                check_sudoku_sequence(dimension, [table_row[n] for table_row in matrix])

                # check subgrids
                for i in range(0, dimension):
                    check_sudoku_sequence(dimension, extract_subgrid(i, matrix))

        except AssertionError:
            print False
            continue

        print True

    f.close()


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))



